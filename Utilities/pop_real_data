import pandas as pd
import numpy as np
from datetime import date
from supabase import create_client, Client
import random

# --- Your Supabase Connection Info ---
url = "https://sywxhehahunevputgxdd.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN5d3hoZWhhaHVuZXZwdXRneGRkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTczMDQxNDEsImV4cCI6MjA3Mjg4MDE0MX0.SGNrmklPobim7-zb4zs78e2i2VRrmV84gV7DIl2m5s8"



START_DATE = date(2025, 1, 1)
END_DATE = date(2025, 12, 31) 

# --- PRODUCT PROFILES (Now includes retail price from your table) ---
product_profiles = {
    38: {"name": "Hershey's Milk Chocolate", "baseline": 50, "retail_price": 3.99, "valentines": 5, "easter": 4, "halloween": 2, "holiday": 3},
    39: {"name": "Hershey's Dark Chocolate", "baseline": 30, "retail_price": 4.49, "valentines": 6, "easter": 3, "halloween": 2, "holiday": 4},
    40: {"name": "Reese's PB Cups",        "baseline": 60, "retail_price": 1.99, "valentines": 4, "easter": 7, "halloween": 10, "holiday": 5},
    41: {"name": "KitKat",                   "baseline": 55, "retail_price": 2.49, "valentines": 2, "easter": 3, "halloween": 5, "holiday": 3},
    42: {"name": "Hershey's Kisses",       "baseline": 40, "retail_price": 5.99, "valentines": 8, "easter": 6, "halloween": 4, "holiday": 9},
    43: {"name": "Twizzlers Strawberry",     "baseline": 35, "retail_price": 2.99, "valentines": 1.5, "easter": 2, "halloween": 6, "holiday": 2},
    44: {"name": "Jolly Rancher",          "baseline": 30, "retail_price": 3.49, "valentines": 1.5, "easter": 2, "halloween": 7, "holiday": 2},
    45: {"name": "Hershey's Special Dark Minis", "baseline": 25, "retail_price": 6.49, "valentines": 7, "easter": 4, "halloween": 3, "holiday": 6},
    46: {"name": "Reese's Pieces",         "baseline": 45, "retail_price": 4.99, "valentines": 2, "easter": 5, "halloween": 9, "holiday": 4},
    47: {"name": "Hershey's Nuggets",      "baseline": 20, "retail_price": 7.99, "valentines": 5, "easter": 5, "halloween": 3, "holiday": 7}
}

N_PRODUCTS = list(product_profiles.keys())

# --- Connect to Supabase ---
supabase: Client = create_client(url, key)

def generate_hyper_realistic_sales_data():
    print("Starting hyper-realistic, transaction-level data generation...")

    # --- DYNAMIC FIX: Fetch actual store and product IDs from the database ---
    print("Fetching actual store IDs from store_master...")
    store_master_data = supabase.table('store_master').select('store_id').execute().data
    actual_store_ids = [store['store_id'] for store in store_master_data]
    print(f"Found store IDs: {actual_store_ids}")

    all_transactions = []
    date_range = pd.to_datetime(pd.date_range(START_DATE, END_DATE))

    for product_id in N_PRODUCTS:
        profile = product_profiles[product_id]
        print(f"Generating data for: {profile['name']}")
        # Use the actual store IDs we fetched
        for store_id in actual_store_ids:
            for day in date_range:
                # --- 1. Calculate TOTAL expected sales for this day using our patterns ---
                day_of_week = day.dayofweek
                day_of_year = day.dayofyear

                weekly_multiplier = np.select([day_of_week == 4, day_of_week == 5, day_of_week == 6], [1.5, 1.8, 1.2], default=1.0)

                valentines_window = (day_of_year >= 30) and (day_of_year <= 45)
                easter_window = (day_of_year >= 85) and (day_of_year <= 105)
                halloween_window = (day_of_year >= 285) and (day_of_year <= 304)
                holiday_window = (day_of_year >= 335) and (day_of_year <= 359)

                holiday_multiplier = 1.0
                if valentines_window: holiday_multiplier = profile['valentines']
                elif easter_window: holiday_multiplier = profile['easter']
                elif halloween_window: holiday_multiplier = profile['halloween']
                elif holiday_window: holiday_multiplier = profile['holiday']

                is_promo_day = np.random.choice([True, False], p=[0.2, 0.8])
                promo_multiplier = random.uniform(2.0, 3.0) if is_promo_day else 1.0

                noise = np.random.randint(-3, 4)

                expected_total_units = int(np.maximum(0, profile['baseline'] * weekly_multiplier * holiday_multiplier * promo_multiplier + noise))

                if expected_total_units == 0:
                    continue

                # --- 2. Simulate individual transactions for the day ---
                num_transactions = random.randint(5, 15)
                transaction_units = np.random.multinomial(expected_total_units, np.ones(num_transactions)/num_transactions)

                for units in transaction_units:
                    if units == 0:
                        continue

                    # --- 3. Set price for each transaction ---
                    on_promotion_flag = False
                    sale_price = profile['retail_price']

                    if is_promo_day and random.random() < 0.3:
                        on_promotion_flag = True
                        discount = random.choice([0.10, 0.15, 0.25])
                        sale_price = round(profile['retail_price'] * (1 - discount), 2)

                    all_transactions.append({
                        "created_at": day,
                        "product_id": product_id,
                        "store_id": store_id,
                        "units_sold": units,
                        "on_promotion": on_promotion_flag,
                        "sale_price": sale_price
                    })

    final_df = pd.DataFrame(all_transactions)
    print(f"Generated {len(final_df)} total transactions.")
    return final_df


def upload_to_supabase(df):
    print("Preparing to upload to Supabase...")
    
    print("Clearing all existing data from 'sales_transactions' table...")
    supabase.table('sales_transactions').delete().neq('transaction_id', 0).execute()
    print("Table cleared.")

    df['created_at'] = df['created_at'].dt.strftime('%Y-%m-%dT%H:%M:%S%z')
    
    records = df.to_dict(orient='records')
    print(f"Uploading {len(records)} new records in chunks...")
    
    chunk_size = 1000
    for i in range(0, len(records), chunk_size):
        chunk = records[i:i + chunk_size]
        supabase.table('sales_transactions').insert(chunk).execute()
        print(f"Uploaded chunk {i // chunk_size + 1}...")
    
    print("âœ… Upload complete!")

if __name__ == "__main__":
    new_sales_data = generate_hyper_realistic_sales_data()
    print("\nSample of generated data:")
    print(new_sales_data.head())
    
    confirm = input("\nARE YOU SURE you want to delete all existing sales data and replace it? (yes/no): ")
    if confirm.lower() == 'yes':
        upload_to_supabase(new_sales_data)
    else:
        print("Upload cancelled.")